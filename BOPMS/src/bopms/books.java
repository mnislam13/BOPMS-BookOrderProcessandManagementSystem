/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package dbdummy;

//import java.DB;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
/**
 *
 * @author user
 */
public class books extends javax.swing.JFrame  {

    public static String bookisbn;
    public static String bookname;
    public static String bookauthor;
    public static String bookpublisher;
    public static String bookcategory;
    public static String price;
    public static String stocks;
    String src;
    String srcOn="bookName";

    /**
     * Creates new form books
     */
    
    
    public books() {
        initComponents();
        DefaultTableModel model = (DefaultTableModel)bookInfo.getModel();
        model.setRowCount(0);  
        show_book();
          
    } 
        
    public ArrayList<bookDisplay> bookList()
    {
        ArrayList<bookDisplay> bookList = new ArrayList<>();
        try {
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            Connection connection = DriverManager
            .getConnection(
             "jdbc:sqlserver://localhost:1433;databaseName=dbBOPMS;"
               + "selectMethod=cursor", "sa", "123456");
            
            
            src = searchBookT.getText();
            String sql = "Select * from books where "+srcOn+" LIKE '"+src+"%' ORDER BY "+srcOn;  
            Statement statement = connection.createStatement();
            ResultSet rs = statement.executeQuery(sql);
            bookDisplay book;
            while(rs.next()){
                book = new bookDisplay(rs.getString("bookISBN"),
                    rs.getString("bookName"),
                    rs.getString("bookAuthor"),
                    rs.getString("bookPublisher"),
                    rs.getString("bookCategory"),
                    rs.getFloat("buyingPrice"),
                    rs.getFloat("sellingPrice"),
                    rs.getInt("stocks")); 
                    bookList.add(book);
                   
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return bookList;
    }
        
    public void show_book(){
    ArrayList<bookDisplay> list = bookList();
    DefaultTableModel model = (DefaultTableModel)bookInfo.getModel();
    Object[] row = new Object[8];
    for(int i = 0; i < list.size(); i++)
    {
        row[0] = list.get(i).getisbn();
        row[1] = list.get(i).getname();
        row[2] = list.get(i).getauthor();
        row[3] = list.get(i).getpublisher();
        row[4] = list.get(i).getcategory();
        row[5] = list.get(i).getcost();
        row[6] = list.get(i).getsell();
        row[7] = list.get(i).getstocks();
        model.addRow(row); 
    }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        booksPanel = new javax.swing.JPanel();
        booksLabel = new javax.swing.JLabel();
        booksExitButton = new javax.swing.JButton();
        backButtonBooks = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        bookInfo = new javax.swing.JTable();
        deleteBook = new javax.swing.JButton();
        updateBook = new javax.swing.JButton();
        addNewBook = new javax.swing.JButton();
        searchBookT = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        filterbycombo = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        setResizable(false);

        booksPanel.setBackground(new java.awt.Color(85, 104, 138));
        booksPanel.setPreferredSize(new java.awt.Dimension(1017, 704));
        booksPanel.setLayout(null);

        booksLabel.setFont(new java.awt.Font("Tempus Sans ITC", 1, 36)); // NOI18N
        booksLabel.setForeground(new java.awt.Color(255, 255, 255));
        booksLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        booksLabel.setText("BOOKS");
        booksPanel.add(booksLabel);
        booksLabel.setBounds(340, 10, 326, 40);

        booksExitButton.setBackground(new java.awt.Color(255, 255, 255));
        booksExitButton.setFont(new java.awt.Font("Tempus Sans ITC", 1, 18)); // NOI18N
        booksExitButton.setText("X");
        booksExitButton.setMaximumSize(new java.awt.Dimension(10, 19));
        booksExitButton.setMinimumSize(new java.awt.Dimension(10, 19));
        booksExitButton.setPreferredSize(new java.awt.Dimension(10, 19));
        booksExitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                booksExitButtonActionPerformed(evt);
            }
        });
        booksPanel.add(booksExitButton);
        booksExitButton.setBounds(960, 10, 50, 30);

        backButtonBooks.setBackground(new java.awt.Color(255, 255, 255));
        backButtonBooks.setFont(new java.awt.Font("Tempus Sans ITC", 1, 36)); // NOI18N
        backButtonBooks.setText("<");
        backButtonBooks.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        backButtonBooks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonBooksActionPerformed(evt);
            }
        });
        booksPanel.add(backButtonBooks);
        backButtonBooks.setBounds(10, 10, 60, 32);

        bookInfo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ISBN", "Book Name", "Author", "Publisher", "Category", "Cost", "Price", "Stocks"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        bookInfo.setColumnSelectionAllowed(true);
        bookInfo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bookInfoMouseClicked(evt);
            }
        });
        bookInfo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                bookInfoKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(bookInfo);
        bookInfo.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);

        booksPanel.add(jScrollPane1);
        jScrollPane1.setBounds(50, 200, 940, 420);

        deleteBook.setText("Delete");
        deleteBook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBookActionPerformed(evt);
            }
        });
        deleteBook.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                deleteBookKeyReleased(evt);
            }
        });
        booksPanel.add(deleteBook);
        deleteBook.setBounds(900, 660, 80, 30);

        updateBook.setText("Update");
        updateBook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateBookActionPerformed(evt);
            }
        });
        booksPanel.add(updateBook);
        updateBook.setBounds(800, 660, 80, 30);

        addNewBook.setText("ADD NEW BOOK");
        addNewBook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addNewBookActionPerformed(evt);
            }
        });
        booksPanel.add(addNewBook);
        addNewBook.setBounds(620, 660, 130, 30);

        searchBookT.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                searchBookTKeyReleased(evt);
            }
        });
        booksPanel.add(searchBookT);
        searchBookT.setBounds(220, 110, 430, 30);

        jLabel1.setFont(new java.awt.Font("Tempus Sans ITC", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Search Here:");
        booksPanel.add(jLabel1);
        jLabel1.setBounds(80, 110, 110, 30);

        filterbycombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "bookName", "bookAuthor", "bookCategory" }));
        filterbycombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filterbycomboActionPerformed(evt);
            }
        });
        booksPanel.add(filterbycombo);
        filterbycombo.setBounds(710, 110, 140, 30);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(booksPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 1017, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(booksPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 745, Short.MAX_VALUE)
        );

        setSize(new java.awt.Dimension(1017, 745));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void booksExitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_booksExitButtonActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_booksExitButtonActionPerformed

    private void backButtonBooksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonBooksActionPerformed
        // TODO add your handling code here:
        
        homePage homePage = new homePage();
        homePage . setVisible(true);
        this.setVisible(false);
        
    }//GEN-LAST:event_backButtonBooksActionPerformed

    private void addNewBookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addNewBookActionPerformed
        addNewBooks addNewBooks = new addNewBooks();
        addNewBooks . setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_addNewBookActionPerformed

    private void searchBookTKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchBookTKeyReleased
        // TODO add your handling code here:
        
        DefaultTableModel table = (DefaultTableModel)bookInfo.getModel();
        table.setRowCount(0);
        show_book();
        //TableRowSorter<DefaultTableModel> tr = new TableRowSorter<DefaultTableModel>(table);
        //bookInfo.setRowSorter(tr);
        //tr.setRowFilter(RowFilter.regexFilter(search));
        
        
        
    }//GEN-LAST:event_searchBookTKeyReleased

    private void deleteBookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBookActionPerformed
        // TODO add your handling code here:
        int opt = JOptionPane.showConfirmDialog(null, "Are you sure you want to delete?",
                "Delete",JOptionPane.YES_NO_OPTION);
        if(opt == 0){
            try {
                
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                Connection connection = DriverManager
                .getConnection(
                    "jdbc:sqlserver://localhost:1433;databaseName=dbBOPMS;"
                            + "selectMethod=cursor", "sa", "123456");

                TableModel model = bookInfo.getModel();
                int i = bookInfo.getSelectedRow();
                               
                String bookisbn = (String) model.getValueAt(i, 0);
                String sql = "Delete From books where bookISBN='"+bookisbn+"'";
                PreparedStatement pst = connection.prepareStatement(sql);
                pst.executeUpdate();
                DefaultTableModel Model = (DefaultTableModel)bookInfo.getModel();
                Model.setRowCount(0);
                show_book();
                JOptionPane.showMessageDialog(null, "Deleted Successfully!");

            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_deleteBookActionPerformed

    private void updateBookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateBookActionPerformed
        // TODO add your handling code here:
        
        TableModel model = bookInfo.getModel();
        int i = bookInfo.getSelectedRow();
        bookisbn = (String) model.getValueAt(i, 0);
        bookname = (String) model.getValueAt(i, 1);
        bookauthor = (String) model.getValueAt(i, 2);
        bookpublisher = (String) model.getValueAt(i, 3);
        bookcategory = (String) model.getValueAt(i, 4);

        int bookstocks = (int) model.getValueAt(i, 7);
        stocks = Integer.toString(bookstocks);
                
        updateBook updateBook = new updateBook();
        updateBook . setVisible(true);
        this.setVisible(false);
        
    }//GEN-LAST:event_updateBookActionPerformed

    private void deleteBookKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_deleteBookKeyReleased
        // TODO add your handling code here:
        
        
    }//GEN-LAST:event_deleteBookKeyReleased

    private void bookInfoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bookInfoMouseClicked
        // TODO add your handling code here:
        int row = bookInfo.getSelectedRow();
        TableModel model = bookInfo.getModel();
        
    }//GEN-LAST:event_bookInfoMouseClicked

    private void bookInfoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_bookInfoKeyPressed
        // TODO add your handling code here:
        
        //JOptionPane.showMessageDialog(null, "check!");
    }//GEN-LAST:event_bookInfoKeyPressed

    private void filterbycomboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filterbycomboActionPerformed
        // TODO add your handling code here:
        srcOn = (String) filterbycombo.getSelectedItem().toString();
    }//GEN-LAST:event_filterbycomboActionPerformed

    /**
     * @param args the command line arguments
     */
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(updateBook.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(updateBook.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(updateBook.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(updateBook.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new books().setVisible(true);
            }
        });
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addNewBook;
    private javax.swing.JButton backButtonBooks;
    private javax.swing.JTable bookInfo;
    private javax.swing.JButton booksExitButton;
    private javax.swing.JLabel booksLabel;
    private javax.swing.JPanel booksPanel;
    private javax.swing.JButton deleteBook;
    private javax.swing.JComboBox<String> filterbycombo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField searchBookT;
    private javax.swing.JButton updateBook;
    // End of variables declaration//GEN-END:variables
}
